<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReportCompiler</name>
    </assembly>
    <members>
        <member name="T:ReportCompiler.Connection">
            <summary>
            Schreibt alle Werte aller Connection 
            die sich in der XML Datei befinden,
            in jeweils einem Connection Objekt.
            </summary>
        </member>
        <member name="P:ReportCompiler.Connection.Id">
            <summary>
            Property für die Verbindugs-Id (Unterknoten)
            </summary>
        </member>
        <member name="P:ReportCompiler.Connection.Type">
            <summary>
            Property für den Verbindungstyp (Unterknoten)
            </summary>
        </member>
        <member name="P:ReportCompiler.Connection.Server">
            <summary>
            Property für die IP Adresse des Datenbankservers(Unterknoten)
            </summary>
        </member>
        <member name="P:ReportCompiler.Connection.Database">
            <summary>
            Property für den Datenbanknamen (Unterknoten)
            </summary>
        </member>
        <member name="P:ReportCompiler.Connection.Username">
            <summary>
            Property für den Benutzername der Datenbank (Unterknoten)
            </summary>
        </member>
        <member name="P:ReportCompiler.Connection.Password">
            <summary>
            Property für das Password des Benutzernamens (Unterknoten)
            </summary>
        </member>
        <member name="T:ReportCompiler.Connector">
            <summary>
            Interface für die beiden Typen von Datenbankverbindung
            </summary>
        </member>
        <member name="M:ReportCompiler.Connector.Connect">
            <summary>
            Methode, um eine Datenbankverbindung zu öffnen
            </summary>
        </member>
        <member name="M:ReportCompiler.Connector.Close">
            <summary>
            Methode, um eine Datenbankverbindung zu schliessen
            </summary>
        </member>
        <member name="M:ReportCompiler.Connector.Result(System.String)">
            <summary>
            Methode, um eine Variable von einer Datenbank auszulesen
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ReportCompiler.Connector.loadTable(System.String)">
            <summary>
            Gibt eine Tabelle aus einer Datenbankabfrage zurück
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:ReportCompiler.MathParser">
            <summary>
            Dieser Teil war nicht Aufgabe der Semesterarbeit
            Dieser Code stammt aus CodeProject
            url:http://www.codeproject.com/Articles/274093/Math-Parser-NET
            </summary>
        </member>
        <member name="T:ReportCompiler.MSConnector">
            <summary>
            Diese Klasse dient zur Verbindung 
            und Abfragen einer MSSQL Datenbank
            </summary>
        </member>
        <member name="F:ReportCompiler.MSConnector.connection">
            <summary>
            Speicher für ein Verbindungsobjekt 
            </summary>
        </member>
        <member name="M:ReportCompiler.MSConnector.#ctor(ReportCompiler.Connection)">
            <summary>
            Generiert die Werte der Verbindung 
            und somit den connectionString
            </summary>
            <param name="connection">Als Parameter wird ein Connection Objekt übergeben</param>
        </member>
        <member name="M:ReportCompiler.MSConnector.Connect">
            <summary>
            Öffnet die Datenbankverbindung
            </summary>
        </member>
        <member name="M:ReportCompiler.MSConnector.Close">
            <summary>
            Schliesst die Datenbankverbindung
            </summary>
        </member>
        <member name="M:ReportCompiler.MSConnector.Result(System.String)">
            <summary>
            Fragt Einzelwert in einer Microsoft SQL Datenbank ab (Variable)
            Bei einem Laufzeitfehler wird eine SQLException gefangen 
            und weiter geworfen
            </summary>
            <param name="text">Beinhaltet die Microsoft SQL Abfrage</param>
            <returns>Gibt das erhaltene Resultat zurück</returns>
        </member>
        <member name="M:ReportCompiler.MSConnector.loadTable(System.String)">
            <summary>
            Fragt eine Microsoft SQL Datenbank ab
            </summary>
            <param name="text">Beihnaltet die Microsoft SQL Abfrage</param>
            <returns>Gibt die erhaltene Tabelle zurück</returns>
        </member>
        <member name="P:ReportCompiler.MSConnector.ConnectionString">
            <summary>
            Speicher für die Verbindungwerte
            </summary>
        </member>
        <member name="T:ReportCompiler.ImportInWord">
            <summary>
            Diese Klasse erstellt das Word Dokument, fügt alle gewünschten Parameter ein und formatiert das gesamte Dokument
            </summary>
        </member>
        <member name="F:ReportCompiler.ImportInWord.word">
            <summary>
            Speicher für die Word Objekt
            </summary>
        </member>
        <member name="F:ReportCompiler.ImportInWord.filename">
            <summary>
            Objekt welches Speicherort und Namen der Datei beinhaltet.
            </summary>
        </member>
        <member name="M:ReportCompiler.ImportInWord.PageSetup(ReportCompiler.PageSetup)">
            <summary>
            Entnimmt aus dem Objekt PageSetup die benötigten Informationen
            um die Grundformatierung des Word-Dokuments durchzuführen.
            Dazu gehört Speicherort und Vorlage
            Um die Datei zu erstellen wird die Methode CreateFile aufgerufen
            
            </summary>
            <param name="pageSetup"></param>
        </member>
        <member name="M:ReportCompiler.ImportInWord.CreateFile(System.String,System.String)">
            <summary>
            Erstellt das Word Dokument aus einer Vorlage
            Falls Datei schon vorhanden ist, oder die Vorlage nicht existiert,
            wird die entsprechende Exception geworfen
            </summary>
            <param name="template"></param>
            <param name="saveAs"></param>
        </member>
        <member name="M:ReportCompiler.ImportInWord.Text(ReportCompiler.Text)">
            <summary>
            Erstellt einen Text im Word Dokument
            durch die entsprechenden Properties des Objekts Test
            wird die gewünschte Formatierung übernommen
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:ReportCompiler.ImportInWord.Table(ReportCompiler.Tabelle)">
            <summary>
            Erstellt eine Word-Tabelle mit der gewünschten Formatierung
            und fügt sie im Word Dokument ein
            </summary>
            <param name="dataTable"></param>
        </member>
        <member name="M:ReportCompiler.ImportInWord.Replace(System.Collections.Generic.List{ReportCompiler.Variabel})">
            <summary>
            Ersetzt alle vorhandenen Variablen im Text
            mit den entsprechenden Werten
            </summary>
            <param name="variables"></param>
        </member>
        <member name="M:ReportCompiler.ImportInWord.TextBold">
            <summary>
            Setzt die Textformatierung auf fett
            wird in der Methode Tabelle aufgerufen
            </summary>
            <returns></returns>
        </member>
        <member name="M:ReportCompiler.ImportInWord.StyleCreator(DocumentFormat.OpenXml.Wordprocessing.RunProperties,System.Int32)">
            <summary>
            Wertet den XML Knoten style aus und 
            setzt die entsprechende Formatierung ein
            1 steht für fett
            2 für kursiv
            3 für unterstrichen
            Wird für Texte benutzt
            </summary>
            <param name="rPr"></param>
            <param name="style"></param>
        </member>
        <member name="M:ReportCompiler.ImportInWord.TransformColor(System.String)">
            <summary>
            Farbenwert wird als String übergeben.
            Diese Methode verwandelt Stringwert in Hex Code
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:ReportCompiler.ImportInWord.TableBackground(System.String)">
            <summary>
            Setzt den Hintergrund in die gewünschte Farbe
            Wird für den Tabellenkopf benötigt
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ReportCompiler.ImportInWord.TableGrid">
            <summary>
            Setzt die Ränder einer Tabelle auf einfache Linien
            </summary>
            <returns></returns>
        </member>
        <member name="M:ReportCompiler.ImportInWord.ParagraphSpacingAfter(System.Int32)">
            <summary>
            Setzt den Absatz nach einem Text oder einer 
            Tabelle auf den gewünschten Wert
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ReportCompiler.ImportInWord.PBreak">
            <summary>
            Fügt einen Seitenumbruch ein
            </summary>
            <returns></returns>
        </member>
        <member name="M:ReportCompiler.ImportInWord.Font(System.String)">
            <summary>
            Definiert die Schrifart
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ReportCompiler.ImportInWord.Size(System.Int32)">
            <summary>
            Definiert die Schriftgrösse
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ReportCompiler.ImportInWord.FontColor(System.String)">
            <summary>
            Definiert die Schriftfarbe
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ReportCompiler.ImportInWord.InsertText(System.String)">
            <summary>
            Fügt Text in Word ein
            Diese Methode wurde erstellt, damit nicht immer der ganze Pfad angegeben werden muss
            da sich Text aus ReportCompiler.Text und aus DocumentFormat.OpenXml.Wordprocessing.Text
            überschneiden
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ReportCompiler.ImportInWord.Quit">
            <summary>
            Wird bei einer Exception aufgerufen
            Word Dokument wird geschlossen und 
            begonnenes Dokument gelöscht
            </summary>
        </member>
        <member name="M:ReportCompiler.ImportInWord.Exit">
            <summary>
            Wird bei erfolgreicher Erstellung aufgerufen
            Änderungen werden gespeichert und Dokument wird geschlossen
            </summary>
        </member>
        <member name="T:ReportCompiler.Mathematics">
            <summary>
            Schreibt alle Werte aller Mathemetik Knoten 
            die sich in der XML Datei befinden,
            in jeweils einem Mathematic Objekt.
            </summary>
        </member>
        <member name="P:ReportCompiler.Mathematics.Name">
            <summary>
            Property für den Namen der algebraischen Formel (Unterknoten)
            </summary>
        </member>
        <member name="P:ReportCompiler.Mathematics.Formula">
            <summary>
            Property für die Formel der algebraischen Formel (Unterknoten)
            </summary>
        </member>
        <member name="P:ReportCompiler.Mathematics.Result">
            <summary>
            Property für das Resultat der algebraischen Formel
            </summary>
        </member>
        <member name="T:ReportCompiler.MyConnector">
            <summary>
            Diese Klasse dient zur Verbindung 
            und Abfragen einer MySQL Datenbank
            </summary>
        </member>
        <member name="F:ReportCompiler.MyConnector.connection">
            <summary>
            Speicher für ein Verbindungsobjekt 
            </summary>
        </member>
        <member name="M:ReportCompiler.MyConnector.#ctor(ReportCompiler.Connection)">
            <summary>
            Generiert die Werte der Verbindung 
            und somit den connectionString
            </summary>
            <param name="connection">Beinhaltet alle benötigten Werte für den Verbindungsaufbau</param>
        </member>
        <member name="M:ReportCompiler.MyConnector.Connect">
            <summary>
            Öffnet die Datenbankverbindung
            </summary>
        </member>
        <member name="M:ReportCompiler.MyConnector.Close">
            <summary>
            Schliesst die Datenbankverbindung
            </summary>
        </member>
        <member name="M:ReportCompiler.MyConnector.Result(System.String)">
            <summary>
            Fragt Einzelwert in einer MySQL Datenbank ab (Variable)
            Bei einem Laufzeitfehler wird eine MySQLException gefangen 
            und weiter geworfen
            </summary>
            <param name="text">Beinhaltet die MySQL Abfrage</param>
            <returns>Gibt das erhaltene Resultat zurück</returns>
            
        </member>
        <member name="M:ReportCompiler.MyConnector.loadTable(System.String)">
            <summary>
            Fragt eine MySQL Datenbank ab
            </summary>
            <param name="text">Beihnaltet die MySQL Abfrage</param>
            <returns>Gibt die erhaltene Tabelle zurück</returns>
        </member>
        <member name="P:ReportCompiler.MyConnector.ConnectionString">
            <summary>
            Speicher für die Verbindungwerte
            </summary>
        </member>
        <member name="T:ReportCompiler.PageSetup">
            <summary>
            Schreibt alle Werte des Formatknotens,
            welches sich in der XML Datei befindet,
            in ein PageSetup Objekt.
            </summary>
        </member>
        <member name="P:ReportCompiler.PageSetup.Save">
            <summary>
            Property für den Pfad des zu erstellenden Dokuments (Unterknoten)
            </summary>
        </member>
        <member name="P:ReportCompiler.PageSetup.Template">
            <summary>
            Property für den Pfad der Vorlage (Unterknoten)
            </summary>
        </member>
        <member name="T:ReportCompiler.Program">
            <summary>
            Hier startet die Ausführung des ReportCompilers
            </summary>
        </member>
        <member name="F:ReportCompiler.Program.path">
            <summary>
            Speicher für den Speicherort der XML Datei
            </summary>
        </member>
        <member name="M:ReportCompiler.Program.Main(System.String[])">
            <summary>
            Führt das Programm aus
            Falls im Programm irgendeine Exception geworfen wurde
            wird sie hier abgefangen und die Laufzeit abgebrochen.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:ReportCompiler.Program.OpenXML(System.String[])">
            <summary>
            Überprüft ob der angegebene Pfad der XML Datei gültig ist
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:ReportCompiler.Program.FileType(System.String)">
            <summary>
            Überprüft ob die angegebene Datei eine XML Datei ist.
            </summary>
            <param name="file">Datei, welche der Benutzer gerne einlesen möchte</param>
            <returns>Gibt einen Boolean Wert zurück, ob Datei eine Xml Datei ist oder nicht.</returns>
        </member>
        <member name="T:ReportCompiler.Tabelle">
            <summary>
            Schreibt alle Werte eines table Knoten
            welches sich in der XML Datei befindet,
            in ein Tabellen Objekt.
            </summary>
        </member>
        <member name="M:ReportCompiler.Tabelle.getContent(System.Collections.Generic.List{ReportCompiler.Connection})">
            <summary>
            Dient zur Abfrage der SQL Datenbank
            In der Connections Liste wird die entsprechende Id gesucht
            Danach wird anhand des Typs der Datenbank (Microsoft SQL oder MySQL) ein neues Objekt für die Datenbankabfrage instaziiert
            Nach dem das Datenbank Objekt instanziiert wurde wird die Abfrage durchgeführt und in der Content Eigenschaft geschrieben
            Falls die Abfrage eine Exception geworfen hat, wird diese gefangen und weitergeleitet.
            </summary>
        </member>
        <member name="P:ReportCompiler.Tabelle.Id">
            <summary>
            Property für die Verbindungs-Id der Tabelle (Unterknoten)
            </summary>
        </member>
        <member name="P:ReportCompiler.Tabelle.Bold">
            <summary>
            Property über den Schriftstil des Tabellenkopfs (Unterknoten)
            </summary>
        </member>
        <member name="P:ReportCompiler.Tabelle.BgColor">
            <summary>
            Property für die Hintergrundfarbe des Tabellenkopfs (Unterknoten)
            </summary>
        </member>
        <member name="P:ReportCompiler.Tabelle.Text">
            <summary>
            Property für die Datenbankabfrage (Unterknoten)
            </summary>
        </member>
        <member name="P:ReportCompiler.Tabelle.Content">
            <summary>
            Property für das Resultat aus der Datenbankabfrage (Unterknoten)
            </summary>
        </member>
        <member name="P:ReportCompiler.Tabelle.Border">
            <summary>
            Property für den Tabellenrand (Unterknoten)
            </summary>
        </member>
        <member name="P:ReportCompiler.Tabelle.Size">
            <summary>
            Property für die Textgrösse innerhalb der Tabelle
            </summary>
        </member>
        <member name="P:ReportCompiler.Tabelle.Paragraph">
            <summary>
            Property für die Absatzgrösse nach der Tabelle
            </summary>
        </member>
        <member name="P:ReportCompiler.Tabelle.Font">
            <summary>
            Property für die Schrifart des Textes innerhalb der Tabelle
            </summary>
        </member>
        <member name="T:ReportCompiler.OpenDocumentException">
            <summary>
            Eigene Exception wird ausgelöst, falls eine Exception während dem Aufbau des Dokuments geworfen wird. Sie erbt von der Klasse Exception
            </summary>
        </member>
        <member name="M:ReportCompiler.OpenDocumentException.#ctor">
            <summary>
            Exception ohne Parameter
            </summary>
        </member>
        <member name="M:ReportCompiler.OpenDocumentException.#ctor(System.String)">
            <summary>
            Exception mit gewünschter Nachricht
            </summary>
            <param name="message">Gewünschte Nachricht</param>
        </member>
        <member name="M:ReportCompiler.OpenDocumentException.#ctor(System.String,System.Exception)">
            <summary>
            Exception mit gewünschter Nachricht und innerer Exception
            </summary>
            <param name="message">Gewünschte Nachricht</param>
            <param name="inner">Innere Exception</param>
        </member>
        <member name="T:ReportCompiler.Text">
            <summary>
            Schreibt alle Werte eines Text Knoten
            welches sich in der XML Datei befindet,
            in ein Text Objekt.
            </summary>
        </member>
        <member name="P:ReportCompiler.Text.Content">
            <summary>
            Property für den Inhalt Texts ab (Unterknoten)
            </summary>
        </member>
        <member name="P:ReportCompiler.Text.Font">
            <summary>
            Property für die Schriftart des Texts ab (Unterknoten)
            </summary>
        </member>
        <member name="P:ReportCompiler.Text.Size">
            <summary>
            Property für die Schriftgrösse des Texts ab (Unterknoten)
            </summary>
        </member>
        <member name="P:ReportCompiler.Text.Style">
            <summary>
            Property für den Schriftstil des Texts ab (Unterknoten)
            </summary>
        </member>
        <member name="P:ReportCompiler.Text.Color">
            <summary>
            Property für die Schriftfarbe des Texts ab (Unterknoten)
            </summary>
        </member>
        <member name="P:ReportCompiler.Text.Paragraph">
            <summary>
            Property für die Absatzgrösse nach dem Text (Unterknoten)
            </summary>
        </member>
        <member name="P:ReportCompiler.Text.PageBreak">
            <summary>
            Property für den Seitenumbruch nach dem Text (Unterknoten)
            </summary>
        </member>
        <member name="T:ReportCompiler.Variabel">
            <summary>
            Schreibt alle Werte aller Variablen 
            die sich in der XML Datei befinden,
            in jeweils einem Variabel Objekt.
            </summary>
        </member>
        <member name="M:ReportCompiler.Variabel.getContent(System.Collections.Generic.List{ReportCompiler.Connection})">
            <summary>
            Variable wird ausgewertet
            Falls die Quelle lokal ist, wird die Methode getLocalContent() aufgrufen.
            Falls die Quelle sql ist wird zuerst die Methode getSqlContent() aufgerufen und danach die Methode getLocalContent().
            </summary>
        </member>
        <member name="M:ReportCompiler.Variabel.getLocalContent">
            <summary>
            Überprüft ob die Variable einen numerischen oder alphabetischen Wert haben soll.
            Falls der Wert nummerisch sein muss. Wird der Wert gecastet und in die Property Number geschrieben.
            Ansonsten wird der Wert in die Property Content geschrieben.
            </summary>
        </member>
        <member name="M:ReportCompiler.Variabel.getSqlContent(System.Collections.Generic.List{ReportCompiler.Connection})">
            <summary>
            Zuerst wird die richtige Datenbankverbindung anhand der ID ausgefiltert. Falls die ID nicht existiert, wird eine Exception geworfen und weitergeleitet.
            Als nächstes wird überprüft, ob der Datenbankserver ein Microsoft SQL Server ist oder ein MySQL Server.
            Danach wird das Resultat mit Hilfe der Datenbankklassen ausgewertet.
            Bei einem Fehler wird eine Exception gefangen und weitergeleitet.
            </summary>
            <param name="connections">Liste aller verfügbaren Datenbankverbindungen</param>
            <returns></returns>
        </member>
        <member name="M:ReportCompiler.Variabel.ResultToDec(System.String)">
            <summary>
            Wandelt einen string wert in einen dezimalen Wert um
            Falls eine Exception zurückgegeben wird, wird diese gefangen und weitergeleiten.
            </summary>
            <param name="text">Als Parameter wird der Inhalt der Variable übergeben</param>
            <returns>Gibt als Resultat, die konvertierte Zahl zurück</returns>
        </member>
        <member name="P:ReportCompiler.Variabel.Id">
            <summary>
            Property für die Verbindungs-Id der Variable (Unterknoten)
            </summary>
        </member>
        <member name="P:ReportCompiler.Variabel.Name">
            <summary>
            Property für den Variablennamen (Unterknoten)
            </summary>
        </member>
        <member name="P:ReportCompiler.Variabel.Type">
            <summary>
            Property für den Typ der Variable (Unterknoten)
            </summary>
        </member>
        <member name="P:ReportCompiler.Variabel.Source">
            <summary>
            Property für die Quelle der Variable (Unterknoten)
            </summary>
        </member>
        <member name="P:ReportCompiler.Variabel.Text">
            <summary>
            Property für den Quelltext der Variable (Unterknoten)
            </summary>
        </member>
        <member name="P:ReportCompiler.Variabel.Content">
            <summary>
            Property für das Resultat und den endgültigen Wert der Variable
            Wird gefüllt, falls der Typ ein string ist
            </summary>
        </member>
        <member name="P:ReportCompiler.Variabel.Number">
            <summary>
            Property für das Resultat und den endgültigen Wert der Variable
            Wird gefüllt, falls der Typ ein int ist
            </summary>
        </member>
        <member name="T:ReportCompiler.ReadXml">
            <summary>
            In dieser Klasse wird das gesamte XML Dokument sequentiell abgearbeitet
            </summary>
        </member>
        <member name="F:ReportCompiler.ReadXml.file">
            <summary>
            Speicher für den Pfad des XML Dokuments
            </summary>
        </member>
        <member name="F:ReportCompiler.ReadXml.doc">
            <summary>
            Speicher für das Word Dokument
            </summary>
        </member>
        <member name="F:ReportCompiler.ReadXml.variables">
            <summary>
            Speicher für eine Liste aller gesetzten Variablen
            </summary>
        </member>
        <member name="F:ReportCompiler.ReadXml.mathParser">
            <summary>
            Speicher für das Rechnungsobjekt
            </summary>
        </member>
        <member name="F:ReportCompiler.ReadXml.reader">
            <summary>
            Speicher für den XML Leser (XmlReader)
            </summary>
        </member>
        <member name="M:ReportCompiler.ReadXml.#ctor(System.String,ReportCompiler.ImportInWord)">
            <summary>
            Konstruktor der Klasse
            Setzt den Pfad der Xml Datei und
            instanziert das Objekt für das zukünftige Word Dokument
            </summary>
            <param name="file">Beinhaltet den Pfad oder den Inhalt der Xml Datei</param>
            <param name="doc">Beinhaltet das Objekt des zukünftigen Word Dokuments</param>
        </member>
        <member name="M:ReportCompiler.ReadXml.CreateXml">
            <summary>
            Liest das XML Dokument mit Hilfe des Pfads ein
            </summary>
        </member>
        <member name="M:ReportCompiler.ReadXml.OpenXml">
            <summary>
            Liest das XML Dokument welche als Klartext übergeben wurde ein
            </summary>
        </member>
        <member name="M:ReportCompiler.ReadXml.AddVariable(ReportCompiler.Variabel)">
            <summary>
            Fügt eine Variable der Liste hinzu
            </summary>
            <param name="variable">Eine Variable mit allen Parameter</param>
        </member>
        <member name="M:ReportCompiler.ReadXml.AddConnection(ReportCompiler.Connection)">
            <summary>
            Fügt eine Verbindung mit all den Parameter züruck
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:ReportCompiler.ReadXml.XML">
            <summary>
            Erste Stufe der Verarbeitung des XML Dokuments
            Es wird überprüft, ob ein gewünschtes Start-Element vorkommt
            Sobald er fündig wird, wird die entsprechende Methode aufgerufen.
            Falls die Methode einen Exception zurückgibt, wird sie gefangen und weitergeleitet.
            </summary>
             
        </member>
        <member name="M:ReportCompiler.ReadXml.Format(System.String)">
            <summary>
            Der Knoten Format wird verarbeitet
            Es wird ein Objekt des Typs PageSetup instanziiert und
            die gewünschten Eigenschaften übergeben.
            Sobald der Knoten abgearbeitet wird, werden im Word Dokument die Eigenschaften übernommen.
            Beim Vorkommen einer Exception wird sie gefangen und weitergeleitet.
            </summary>
            <param name="xml">Als Parameter wird der gesamte Knoten Format und seine Knoten übergeben</param>
        </member>
        <member name="M:ReportCompiler.ReadXml.Connection(System.String)">
            <summary>
            Der Knoten Connections wird verarbeitet
            Sobald der XmlReader einen Knoten namens Connection findet instanziiert er ein neues Connection Objekt
            ,die gewünschten Eigenschaften übergeben und das gesamte Objekt der Liste Connections hinzugefügt.
            
            </summary>
            <param name="xml">Als Parameter wird der Knoten Connections und all seine Unterknoten übergeben</param>
        </member>
        <member name="M:ReportCompiler.ReadXml.Variable(System.String)">
            <summary>
            Der Knoten variables wird verarbeitet
            Sobald der XmlReader einen Unterknoten variable einliest wird ein neues Variabel Objekt instanziiert und die gewünschten Eigenschaften übergeben.
            Danach wird der Inhalt der Variable ausgewertet, falls eine Exception zurückgegeben wird, wird sie gefangen und weitergeleitet.
            Die ausgewertete Variable wird zur Liste der gesetzen Variablen hinzugefügt. 
            </summary>
            <param name="xml">Als Parameter wird der Knoten variables und all seine Unterknoten übergebenAls Parameter wird der Knoten Connections und all seine Unterknoten übergeben</param>
        </member>
        <member name="M:ReportCompiler.ReadXml.Mathe(System.String)">
            <summary>
            Der Knoten maths wird verarbeitet
            Sobald der XmlReader einen Knoten namens math findet instanziiert er ein neues Mathematics Objekt und übergibt die gewünschten Eigenschaften.
            Danach wertet er die Formel über die Klasse MathParser aus.
            Das Resultat wird als lokale int Variable gesetzt und in der Liste der gesetzten Variablen hinzugefügt
            </summary>
            <param name="xml">Als Parameter wird der Knoten Maths und all seine Unterknoten übergeben</param>
        </member>
        <member name="M:ReportCompiler.ReadXml.Text(System.String)">
            <summary>
            Hier wird der Knoten Text ausgewertet
            Es wird ein neues Text Objekt instanziiert und die entsprechenden Eigenschaften übergeben
            Falls eine Exception beim Casten der Werte geworfen wird, wird diese gefangen und weitergeleitet
            Bei erfolreicher Erstellung des Objekts wird dieses in dem Word Dokument eingefügt
            </summary>
            <param name="xml">Der Parameter beinhaltet einen Textknoten mit all seinen Unterknoten</param>
        </member>
        <member name="M:ReportCompiler.ReadXml.Tabelle(System.String)">
            <summary>
            Dient zur Auswertung des Knoten Tabelle
            Es wird eine Tabellen Objekt instanziiert und die entsprechenden Eigenschaften übernommen.
            Falls eine Exception beim Casten der Werte geworfen wird, wird diese gefangen und weitergeleitet
            Bei erfolgreicher Erstellung des Objekts wird der Tabelleninhalt über eine Datenbankanbindung abgefragt.
            Falls eine Exception bei der Abfrage geworfen wird, wird diese gefangen und weitergeleitet.
            Bei erfolgreicher Abfrage wird die Tabelle im Word Dokument hinzugefügt
            </summary>
            <param name="xml"></param>
        </member>
        <member name="P:ReportCompiler.ReadXml.ListOfVariables">
            <summary>
            Gibt eine Liste aller gesetzten Variablen zurück
            </summary>
        </member>
        <member name="P:ReportCompiler.ReadXml.ListOfConnections">
            <summary>
            Gibt eine Liste aller verfügbaren Datenbankverbindungen zurück
            </summary>
        </member>
    </members>
</doc>
